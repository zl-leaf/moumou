// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package conv

import (
	conv "github.com/moumou/server/biz/conv"
	model "github.com/moumou/server/biz/model"
	data "github.com/moumou/server/biz/service/user/data"
	proto "github.com/moumou/server/gen/proto"
)

type IConverterImpl struct{}

func (c *IConverterImpl) ConvertCreatePermissionRequestDataToBO(source *proto.CreatePermissionRequestData, target *model.Permission) {
	if source != nil {
		target.Name = source.Name
		target.Code = source.Code
		target.Pid = source.Pid
		target.Sort = conv.Int32ToInt(source.Sort)
	}
}
func (c *IConverterImpl) ConvertCreateRoleRequestDataToBO(source *proto.CreateRoleRequestData, target *model.Role) {
	if source != nil {
		target.Name = source.Name
	}
}
func (c *IConverterImpl) ConvertCreateUserRequestDataToBO(source *proto.CreateUserRequestData, target *model.User) {
	if source != nil {
		target.Username = source.Username
		target.Password = source.Password
	}
}
func (c *IConverterImpl) ConvertGetUserListRequestFilter(source *proto.GetUserListRequestFilter) *data.ListUserFilter {
	var pDataListUserFilter *data.ListUserFilter
	if source != nil {
		var dataListUserFilter data.ListUserFilter
		if (*source).UsernameLike != nil {
			xstring := *(*source).UsernameLike
			dataListUserFilter.UsernameLike = &xstring
		}
		pDataListUserFilter = &dataListUserFilter
	}
	return pDataListUserFilter
}
func (c *IConverterImpl) ConvertPermissionListToVO(source []*model.Permission) []*proto.Permission {
	var pApiPermissionList []*proto.Permission
	if source != nil {
		pApiPermissionList = make([]*proto.Permission, len(source))
		for i := 0; i < len(source); i++ {
			pApiPermissionList[i] = c.ConvertPermissionToVO(source[i])
		}
	}
	return pApiPermissionList
}
func (c *IConverterImpl) ConvertPermissionToVO(source *model.Permission) *proto.Permission {
	var pApiPermission *proto.Permission
	if source != nil {
		var apiPermission proto.Permission
		apiPermission.Id = (*source).BaseModel.Id
		apiPermission.Name = (*source).Name
		apiPermission.Code = (*source).Code
		apiPermission.Pid = (*source).Pid
		apiPermission.Sort = conv.IntToInt32((*source).Sort)
		pApiPermission = &apiPermission
	}
	return pApiPermission
}
func (c *IConverterImpl) ConvertPermissionTreeNodeListToVO(source []*model.Permission) []*proto.PermissionTreeNode {
	var pApiPermissionTreeNodeList []*proto.PermissionTreeNode
	if source != nil {
		pApiPermissionTreeNodeList = make([]*proto.PermissionTreeNode, len(source))
		for i := 0; i < len(source); i++ {
			pApiPermissionTreeNodeList[i] = c.ConvertPermissionTreeNodeToVO(source[i])
		}
	}
	return pApiPermissionTreeNodeList
}
func (c *IConverterImpl) ConvertPermissionTreeNodeToVO(source *model.Permission) *proto.PermissionTreeNode {
	var pApiPermissionTreeNode *proto.PermissionTreeNode
	if source != nil {
		var apiPermissionTreeNode proto.PermissionTreeNode
		apiPermissionTreeNode.Id = (*source).BaseModel.Id
		apiPermissionTreeNode.Name = (*source).Name
		apiPermissionTreeNode.Code = (*source).Code
		apiPermissionTreeNode.Pid = (*source).Pid
		apiPermissionTreeNode.Sort = conv.IntToInt32((*source).Sort)
		pApiPermissionTreeNode = &apiPermissionTreeNode
	}
	return pApiPermissionTreeNode
}
func (c *IConverterImpl) ConvertRoleListToVO(source []*model.Role) []*proto.Role {
	var pApiRoleList []*proto.Role
	if source != nil {
		pApiRoleList = make([]*proto.Role, len(source))
		for i := 0; i < len(source); i++ {
			pApiRoleList[i] = c.ConvertRoleToVO(source[i])
		}
	}
	return pApiRoleList
}
func (c *IConverterImpl) ConvertRoleToVO(source *model.Role) *proto.Role {
	var pApiRole *proto.Role
	if source != nil {
		var apiRole proto.Role
		apiRole.Id = (*source).BaseModel.Id
		apiRole.Name = (*source).Name
		pApiRole = &apiRole
	}
	return pApiRole
}
func (c *IConverterImpl) ConvertUpdatePermissionRequestDataToBO(source *proto.UpdatePermissionRequestData, target *model.Permission) {
	if source != nil {
		target.Name = source.Name
		target.Code = source.Code
		target.Pid = source.Pid
		target.Sort = conv.Int32ToInt(source.Sort)
	}
}
func (c *IConverterImpl) ConvertUpdateRoleRequestDataToBO(source *proto.UpdateRoleRequestData, target *model.Role) {
	if source != nil {
		target.Name = source.Name
	}
}
func (c *IConverterImpl) ConvertUpdateUserRequestDataToBO(source *proto.UpdateUserRequestData, target *model.User) {
	if source != nil {
		target.Username = source.Username
	}
}
func (c *IConverterImpl) ConvertUserListToVO(source []*model.User) []*proto.User {
	var pApiUserList []*proto.User
	if source != nil {
		pApiUserList = make([]*proto.User, len(source))
		for i := 0; i < len(source); i++ {
			pApiUserList[i] = c.ConvertUserToVO(source[i])
		}
	}
	return pApiUserList
}
func (c *IConverterImpl) ConvertUserToVO(source *model.User) *proto.User {
	var pApiUser *proto.User
	if source != nil {
		var apiUser proto.User
		apiUser.Id = (*source).BaseModel.Id
		apiUser.Username = (*source).Username
		pApiUser = &apiUser
	}
	return pApiUser
}
