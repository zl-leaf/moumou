// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: security.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSecurityHandlerCaptcha = "/server.api.SecurityHandler/Captcha"
const OperationSecurityHandlerLogin = "/server.api.SecurityHandler/Login"
const OperationSecurityHandlerLogout = "/server.api.SecurityHandler/Logout"
const OperationSecurityHandlerSelf = "/server.api.SecurityHandler/Self"

type SecurityHandlerHTTPServer interface {
	Captcha(context.Context, *CaptchaRequest) (*CaptchaResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Self(context.Context, *SelfRequest) (*SelfResponse, error)
}

func RegisterSecurityHandlerHTTPServer(s *http.Server, srv SecurityHandlerHTTPServer) {
	r := s.Route("/")
	r.POST("/security/captcha", _SecurityHandler_Captcha0_HTTP_Handler(srv))
	r.POST("/security/login", _SecurityHandler_Login0_HTTP_Handler(srv))
	r.POST("/security/logout", _SecurityHandler_Logout0_HTTP_Handler(srv))
	r.POST("/security/self", _SecurityHandler_Self0_HTTP_Handler(srv))
}

func _SecurityHandler_Captcha0_HTTP_Handler(srv SecurityHandlerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecurityHandlerCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Captcha(ctx, req.(*CaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResponse)
		return ctx.Result(200, reply)
	}
}

func _SecurityHandler_Login0_HTTP_Handler(srv SecurityHandlerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecurityHandlerLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _SecurityHandler_Logout0_HTTP_Handler(srv SecurityHandlerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecurityHandlerLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResponse)
		return ctx.Result(200, reply)
	}
}

func _SecurityHandler_Self0_HTTP_Handler(srv SecurityHandlerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelfRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecurityHandlerSelf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Self(ctx, req.(*SelfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelfResponse)
		return ctx.Result(200, reply)
	}
}

type SecurityHandlerHTTPClient interface {
	Captcha(ctx context.Context, req *CaptchaRequest, opts ...http.CallOption) (rsp *CaptchaResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutResponse, err error)
	Self(ctx context.Context, req *SelfRequest, opts ...http.CallOption) (rsp *SelfResponse, err error)
}

type SecurityHandlerHTTPClientImpl struct {
	cc *http.Client
}

func NewSecurityHandlerHTTPClient(client *http.Client) SecurityHandlerHTTPClient {
	return &SecurityHandlerHTTPClientImpl{client}
}

func (c *SecurityHandlerHTTPClientImpl) Captcha(ctx context.Context, in *CaptchaRequest, opts ...http.CallOption) (*CaptchaResponse, error) {
	var out CaptchaResponse
	pattern := "/security/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecurityHandlerCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecurityHandlerHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/security/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecurityHandlerLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecurityHandlerHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutResponse, error) {
	var out LogoutResponse
	pattern := "/security/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecurityHandlerLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecurityHandlerHTTPClientImpl) Self(ctx context.Context, in *SelfRequest, opts ...http.CallOption) (*SelfResponse, error) {
	var out SelfResponse
	pattern := "/security/self"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecurityHandlerSelf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
